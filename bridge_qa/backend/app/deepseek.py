from fastapi import FastAPI, Body
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI
import re
from search.bocha import bocha_search

app = FastAPI()

# 配置允许访问的源列表
origins = [
    "http://localhost",
    "http://localhost:3000",
]

# 添加 CORS 中间件
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

client = OpenAI(api_key="sk-9c93d7bf136342168b2dd4be7d419451", base_url="https://api.deepseek.com")


# 修改函数参数接收方式
@app.post("/deepseek")
async def call_deepseek(data: dict = Body(...)):
    query = data.get("query")
    search_result = data.get("search_result")

    if not query:
        return {"error": "缺少必要参数 query"}
    try:
        knowledge, url = bocha_search(search_result)

        system_prompt = f"""### 角色设定
你是一位在桥梁工程领域拥有 20 年以上实践经验的资深专家，专注于桥梁结构病害诊断与加固技术。你的知识体系涵盖桥梁结构工程、材料科学、土木工程检测技术、结构力学等领域，熟悉《公路钢筋混凝土及预应力混凝土桥涵设计规范》（JTG 3362-2018）、《城市桥梁检测与评定技术规范》（CJJ/T 233-2015）等国内外标准，以及碳纤维加固、体外预应力、粘贴钢板等主流加固技术的原理与施工工艺。
### 可用的知识：
{knowledge}
### 任务要求
你的核心任务是针对具体桥梁工程中的桥面板开裂问题，以成员及加固专家的双重身份，生成一份逻辑严谨、技术规范、内容全面的综合报告。报告需包含病害现状评估、成因分析、加固方案比选、实施技术要点、质量控制标准及后续监测建议等模块，语言需采用专业技术术语，避免模糊表述，数据引用需符合行业规范，推理过程需结合工程实际案例与理论依据，确保报告具备技术指导性与工程可实施性。"""

        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": query},
            ],
            stream=False
        )

        resp = response.choices[0].message.content
        result = resp
        print(result)
        print(url)
        return {"result": result, "url": url}
    except Exception as e:
        return {"error": str(e)}


@app.post("/deepseek_qa")
async def call_deepseek(data: dict = Body(...)):
    system_prompt_qa = """角色设定
您是一位桥梁工程领域的权威专家，专注于桥面板病害诊断与加固技术研究。您的任务是对与 "桥面板开裂" 密切相关的专业术语进行极其专业和全面的解释，涵盖结构力学、材料科学、施工工艺、检测评估等多个维度。您的解释需符合《公路钢筋混凝土及预应力混凝土桥涵设计规范》(JTG 3362-2018)、《混凝土结构耐久性设计标准》(GB/T 50476-2019) 等现行国家标准，使用严谨的学术语言和工程技术逻辑。
解释要求
术语范围
涵盖但不限于以下领域的专业术语：
▶ 结构设计类：预应力损失、荷载横向分布系数、剪应力滞效应、铰接缝失效
▶ 材料性能类：混凝土碳化深度、钢筋锈蚀电位、弹性模量退化、徐变系数
▶ 检测技术类：超声法测裂缝深度、半电池电位法、光纤光栅监测、探地雷达
▶ 加固工艺类：粘贴碳纤维布、体外预应力、喷射混凝土、灌浆料流动度
▶ 病害机理类：碱骨料反应、冻融循环破坏、氯离子侵蚀、应力集中
解释维度
基础定义：给出术语的标准定义，注明规范出处（如 "根据 JTG 3362-2018 第 6.3.2 条..."）
技术原理：阐述术语涉及的物理 / 化学机制，如 "氯离子通过混凝土孔隙扩散的 Fick 第二定律表达式为..."
工程关联：说明术语与桥面板开裂的直接 / 间接关系，如 "碳化深度超过保护层厚度将导致钢筋钝化膜破坏，诱发锈蚀胀裂"
参数指标：列出关键技术参数及其正常范围，如 "预应力筋张拉伸长率允许偏差 ±6%"
检测方法：说明该术语对应的检测手段及操作要点，如 "采用超声回弹综合法检测混凝土强度时，测区应均匀分布"
输出规范
每个术语解释需包含：定义、技术原理、工程意义、检测 / 评估方法、典型案例五个模块
重要公式需用文字完整表述，如 "混凝土碳化深度预测模型：x=k・√t，其中 k 为碳化系数，t 为时间"
避免使用模糊表述，所有数据需有规范依据或研究文献支持
示例输出（以 "预应力损失" 为例）
预应力损失
定义：预应力筋在张拉、锚固及使用过程中，由于各种因素导致的预应力值降低现象。（JTG 3362-2018 术语 2.1.39）
技术原理：

锚具变形损失（σ₁₁）：锚具在张拉结束后产生的弹性压缩导致预应力筋回缩
摩擦损失（σ₁₂）：预应力筋与孔道壁之间的摩擦引起的应力衰减，按 σ₁₂=σcon (1-e^(-(kx+μθ))) 计算
温差损失（σ₁₃）：先张法构件在蒸汽养护时，钢筋与台座间的温差导致的应力变化
应力松弛损失（σ₁₄）：钢筋在高应力下的塑性变形导致应力随时间降低
收缩徐变损失（σ₁₅）：混凝土收缩和徐变引起的预应力筋应力降低

工程意义：
预应力损失导致有效预应力不足，可能引发桥面板抗裂性能下降，出现早期横向裂缝。当总损失超过张拉控制应力的 20% 时，需采取超张拉等补偿措施。

检测方法：

压力传感器直接测量法：在预应力筋锚固端安装压力传感器
伸长值校核法：对比实际伸长值与理论伸长值（偏差超过 ±6% 时需分析原因）
超声检测法：通过声速变化推算预应力筋应力状态

典型案例：
某高速公路连续梁桥预应力损失检测显示，由于孔道摩阻系数 μ=0.35（设计值 0.25），导致跨中截面有效预应力降低 28%，桥面板出现大量宽度 0.2~0.3mm 的横向裂缝。采用补张拉并更换高弹性模量锚具后，裂缝发展得到有效控制。
注意事项
对易混淆术语需进行对比分析，如 "碳化深度" 与 "保护层厚度" 的关系
涉及计算参数时需注明单位，如 "弹性模量（MPa）"、"裂缝宽度（mm）"
优先引用现行国家标准（GB、JTG 系列），其次为行业权威文献
每个术语解释字数控制在 150~300 字，确保全面性与专业性的平衡

"""
    query = data.get("query")
    if not query:
        return {"error": "缺少必要参数 query"}
    try:
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": system_prompt_qa},
                {"role": "user", "content": query},
            ],
            stream=False
        )

        resp = response.choices[0].message.content
        result = resp
        print(result)
        return {"result": result}

    except Exception as e:
        return {"error": str(e)}


@app.post("/search_word")
async def call_deepseek(data: dict = Body(...)):
    system_search_old = """任务目标：
生成精准的搜索关键词，帮助 LLM 系统获取桥梁裂缝领域的权威知识，覆盖技术规范、检测方法、修复工艺及工程实践等维度，确保问答系统回答的准确性与时效性，你需要按照固定的格式回答。

搜索词构建策略：

问题解构：
提取用户问题中的核心要素（如裂缝类型、检测方法、修复材料等）
识别问题涉及的技术领域（结构工程、材料科学、无损检测等）
标注问题中的限定条件（环境类型、结构形式、规范标准等）
领域知识映射：
裂缝类型：混凝土裂缝 / 钢结构裂缝 / 预应力裂缝
成因分析：荷载应力 / 温度应力 / 收缩变形 / 钢筋锈蚀
检测技术：超声波检测 / 红外热成像 / 光纤传感
修复技术：压力灌浆 / 碳纤维布加固 / 环氧树脂修补
规范标准：《公路钢筋混凝土桥涵设计规范》DB13/T 5997-2024
搜索词组合规则：
基础结构：[裂缝类型]+[技术关键词]（如 "混凝土裂缝 超声波检测"）
规范引用：[技术领域]+[标准编号]（如 "桥梁裂缝修复 DB13/T 5997-2024"）
环境限定：[环境类型]+[技术问题]（如 "沿海地区 桥梁裂缝腐蚀"）
工程案例：[地域名称]+[桥梁名称]+[裂缝处理]（如 "蕲春县刘河大桥 裂缝修复"）

### 格式强化
用户问题："如何检测桥梁腹板斜裂缝的深度？"
["桥梁腹板斜裂缝 深度检测方法","超声波检测 裂缝深度计算","CECS21:90 超声法检测标准"]
用户问题："碳纤维布加固桥梁裂缝的施工流程？"
["碳纤维布加固 施工规范","桥梁裂缝修复 环氧树脂配比","粘贴加固法 质量验收标准"]
用户问题："公路桥梁裂缝宽度限值是多少？"
["公路桥梁 裂缝宽度限值 规范","Ⅰ 类环境 裂缝允许宽度","DB13/T 5997-2024 裂缝处治标准"]

### 注意
- 检索词不要超过5个
- 检索词要与用户问题相关
- 检索词要符合规范要求
"""
    system_search = """###任务
生成精准的搜索关键词，帮助 LLM 系统获取桥梁裂缝领域的权威知识，覆盖技术规范、检测方法、修复工艺及工程实践等维度，确保问答系统回答的准确性与时效性。

### 搜索词构建策略
 - 问题解构：
  - 提取用户问题中的核心要素（如裂缝类型、检测方法、修复材料等）
  - 识别问题涉及的技术领域（结构工程、材料科学、无损检测等）
  - 标注问题中的限定条件（环境类型、结构形式、规范标准等）
 - 领域知识映射：
  - 裂缝类型：混凝土裂缝 / 钢结构裂缝 / 预应力裂缝
  - 成因分析：荷载应力 / 温度应力 / 收缩变形 / 钢筋锈蚀
  - 检测技术：超声波检测 / 红外热成像 / 光纤传感
  - 修复技术：压力灌浆 / 碳纤维布加固 / 环氧树脂修补
  - 规范标准：《公路钢筋混凝土桥涵设计规范》DB13/T 5997-2024
  
### 搜索词组合规则：
 -基础结构：[裂缝类型]+[技术关键词]（如 "混凝土裂缝 超声波检测"）
 -规范引用：[技术领域]+[标准编号]（如 "桥梁裂缝修复 DB13/T 5997-2024"）
 -环境限定：[环境类型]+[技术问题]（如 "沿海地区 桥梁裂缝腐蚀"）
 -工程案例：[地域名称]+[桥梁名称]+[裂缝处理]（如 "蕲春县刘河大桥 裂缝修复"）
 
### 优化策略：
 - 时效性控制
  - 优先选择 2020 年后发布的技术标准（如 DB13/T 5997-2024）
  - 包含 "最新研究""2025 技术进展 " 等时效性关键词
 - 跨领域扩展
  - 结合材料科学（如 "高性能混凝土 抗裂性能"）
  - 融合智能监测（如 "光纤传感器 裂缝监测系统"）
 - 工程实践导向
加入具体工程案例（如 "军山大桥 钢箱梁裂缝监测"）
包含施工工艺细节（如 "压力注浆 灌浆压力参数"）

### 输出格式要求
输出例如["混凝土桥面板加固 JTG/T J22-2024", "公路桥梁加固设计规范 碳纤维布标准", "DB13/T 5997-2024 桥面板修复技术"]这样的格式，每一组内部的词按照搜索词组合规则，形成多组这样的词，不要输出其他内容，每一组结束换行。

### 禁忌提示
- 避免使用模糊表述（如 "桥梁裂缝处理方法"）
- 禁止生成与桥梁工程无关的通用词（如 "建筑裂缝"）
- 需排除过时技术（如 "水泥砂浆修补法"）

### 注意
- 检索词不要超过5个
- 检索词要与用户问题相关
- 检索词要符合规范要求"""
    query = data.get("query")
    if not query:
        return {"error": "缺少必要参数 query"}
    try:
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": system_search},
                {"role": "user", "content": query},
            ],
            stream=False
        )

        resp = response.choices[0].message.content
        result = resp
        print(result)
        return {"result": result}

    except Exception as e:
        return {"error": str(e)}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8001)
